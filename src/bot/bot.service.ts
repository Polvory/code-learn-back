import { Injectable, Logger } from '@nestjs/common';
import { Hears, Start, Update, Action } from 'nestjs-telegraf';
import { Context, Markup, Telegram } from 'telegraf';
import { Cron } from '@nestjs/schedule';
import { UsersService } from '../users/users.service'
import { getBotConfig } from '../config/bot.config'
import { JwtService } from '../jwt/jwt.service'
import { QuestionService } from '../questions/question.service'
import * as fs from 'fs';
import axios from 'axios'
import * as path from 'path';
@Update()
@Injectable()
export class BotService {
    private readonly logger = new Logger(BotService.name)
    bot: Telegram
    constructor(
        private QuestionService: QuestionService,
        private JwtService: JwtService,
        private UsersService: UsersService
    ) { this.bot = new Telegram(getBotConfig().token) }

    async getUserPhoto(user_id: any) {

        const userProfilePhotos = await this.bot.getUserProfilePhotos(user_id)

        if (userProfilePhotos.total_count > 0) {
            // –ò–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const fileId = userProfilePhotos.photos[0][0].file_id;
            return fileId;
        } else {
            console.error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è')

        }
    }
    async downloadPhoto(filePath: string, user_id: string): Promise<void> {
        const token = getBotConfig().token;
        const rootDir = path.resolve(__dirname, '../../');
        const savePath = path.join(rootDir, 'user_images', `${user_id}.jpg`);

        try {
            const response = await axios.get(filePath, {
                responseType: 'stream',
                headers: { 'Authorization': `Bearer ${token}` }
            });

            if (response.status !== 200) {
                throw new Error(`Failed to download image: ${response.statusText}`);
            }

            return new Promise((resolve, reject) => {
                const writer = fs.createWriteStream(savePath);
                response.data.pipe(writer);
                writer.on('finish', () => {
                    console.log(`Image downloaded and saved as ${user_id}.jpg`);
                    const file: any = `https://code-learn.ru/user_images/${user_id}.jpg`
                    resolve(file);
                });
                writer.on('error', reject);
            });
        } catch (error) {
            console.error(`Error downloading photo for user ${user_id}:`, error);

        }
    }


    @Start()
    async startCommand(ctx: Context) {
        const plans: any = await this.QuestionService.getAllCards()
        const plan_list = plans.map(item => { return `‚úÖ ${item.type}\n` });
        const ctx_data: any = ctx.update
        console.log(ctx_data.message.from.username)
        const img_id = await this.getUserPhoto(ctx_data.message.from.id)
        let img_href = 'https://avatars.githubusercontent.com/u/84640980?v=4'
        try {
            const file = await this.bot.getFileLink(img_id)
            let img_name: any = await this.downloadPhoto(file.href, ctx_data.message.from.id)
            if (img_name) {
                img_href = img_name
            }
        } catch (error) {
            console.error('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è')
        }



        const pauloud: any = {
            user_id: String(ctx_data.message.from.id),
            user_name: ctx_data.message.from.username,
            user_image: img_href
        }
        await this.UsersService.createUser(pauloud)

        const webAppUrl = 'https://code-learn.ru/'
        ctx.sendMessage(`–ü—Ä–∏–≤–µ—Ç! Code-Learn ‚Äî —ç—Ç–æ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º.\n–ö–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç: –≤—ã–±–∏—Ä–∞–µ—à—å –Ω—É–∂–Ω—É—é —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞, –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –æ—Ç–≤–µ—Ç, –∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–≤–æ–π –æ—Ç–≤–µ—Ç.
–°–µ–π—á–∞—Å –≤ –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:

${plan_list.map(item => item.trim(','))}\n
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –¥—Ä—É–≥–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø–∏—à–∏ @polvory ‚Äî –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏–º –µ—ë.

–ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø–æ—ç—Ç–æ–º—É –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ 20 –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏, –∏ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ø–æ–ª–Ω—è—é—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å. –ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–∞–µ—Ç 50 –æ—Ç–≤–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞. –ù–∞–ø–∏—à–∏ @polvory

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∞—Ç—å –æ –±–∞–≥–∞—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∏–¥–µ–∏ –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º.
@code_learn_chat
`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: `–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è`, callback_data: `sendvideo` }],
                    [{ text: `–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-app`, web_app: { url: webAppUrl } }]
                ],
                resize_keyboard: true
            }
        }
        )
    }
    @Hears('/token')
    async getTiken(ctx: Context) {
        const user: any = ctx.message.from
        if (String(user.id) === '6935066908') {
            let token = await this.JwtService.signPayload(String(user.id))
            await ctx.sendMessage(token)
        }

    }
    @Cron('0 0 * * *')
    async updateRequests(ctx: Context) {
        const users = await this.UsersService.getAllUsers()
        this.logger.log(JSON.stringify(users))
        for (let user of users) {
            this.logger.log(JSON.stringify(user.user_id))
            if (user.premium) {
                const count = 50
                user.reqvests = count
                await user.save()
                this.bot.sendMessage(user.user_id, `–ó–∞–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –î–æ—Å—Ç—É–ø–Ω–æ ${count}`)
            } else {
                const count = 20
                user.reqvests = count
                await user.save()
                this.bot.sendMessage(user.user_id, `–ó–∞–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –î–æ—Å—Ç—É–ø–Ω–æ ${count}`)
            }


        }
    }
    @Action(/sendvideo/)
    async sendVideo(ctx: Context) {
        const ctx_update: any = ctx.update
        const user_id = String(ctx_update.callback_query.from.id)
        let videoPath = '/home/ai/video/preview.mp4'
        const videoStream = fs.createReadStream(videoPath)
        ctx.sendMessage('–ú–∏–Ω—É—Ç–∫—É üòä')
        ctx.sendVideo({ source: videoStream });
    }
}
