export const JSQU = [
    {
        "question": "Что выведет этот код: console.log(typeof null);?",
        "options": ["object", "null", "undefined", "string"],
        "correct": "object",
        "explanation": "Тип данных null в JavaScript возвращает 'object' из-за бага в языке."
    },
    {
        "question": "Что выведет этот код: console.log(0.1 + 0.2 == 0.3);?",
        "options": ["true", "false"],
        "correct": "false",
        "explanation": "Из-за особенностей представления чисел с плавающей запятой, сумма 0.1 и 0.2 не точно равна 0.3."
    },
    {
        "question": "Что такое NaN в JavaScript?",
        "options": ["Not a Number", "Null and None", "No actual Number", "None and Null"],
        "correct": "Not a Number",
        "explanation": "NaN расшифровывается как 'Not a Number' и используется для обозначения значения, которое не является числом."
    },
    {
        "question": "Что делает метод Array.prototype.map()?",
        "options": [
            "Возвращает новый массив с результатами применения функции к каждому элементу массива",
            "Изменяет массив на месте, удаляя элементы",
            "Объединяет два массива в один",
            "Находит первый элемент, соответствующий условию"
        ],
        "correct": "Возвращает новый массив с результатами применения функции к каждому элементу массива",
        "explanation": "Метод map() создает новый массив с результатами вызова указанной функции для каждого элемента массива."
    },
    {
        "question": "Какое значение вернет следующая строка: Boolean('false');?",
        "options": ["true", "false"],
        "correct": "true",
        "explanation": "Любая непустая строка в JavaScript приводится к булевому значению true."
    },
    {
        "question": "Что такое замыкание в JavaScript?",
        "options": [
            "Функция, вызывающая саму себя",
            "Функция, имеющая доступ к переменным из своей внешней области видимости",
            "Функция, принимающая другую функцию в качестве аргумента",
            "Функция, возвращающая другую функцию"
        ],
        "correct": "Функция, имеющая доступ к переменным из своей внешней области видимости",
        "explanation": "Замыкание — это функция, которая запоминает свои внешние переменные и может получить к ним доступ, даже если выполняется вне своей области видимости."
    },
    {
        "question": "Как можно объявить переменную, доступную только внутри блока кода?",
        "options": ["var", "let", "const", "both let and const"],
        "correct": "both let and const",
        "explanation": "Переменные, объявленные с помощью let и const, имеют блочную область видимости и доступны только внутри блока, в котором они объявлены."
    },
    {
        "question": "Что произойдет, если вызвать метод bind() на функции?",
        "options": [
            "Метод вызовет функцию сразу",
            "Метод создаст новую функцию с привязанным значением this",
            "Метод изменит this функции на переданное значение",
            "Метод удалит контекст функции"
        ],
        "correct": "Метод создаст новую функцию с привязанным значением this",
        "explanation": "Метод bind() создает новую функцию, которая при вызове имеет установленное значение this, предоставленное в качестве первого аргумента bind()."
    },
    {
        "question": "Что такое промис в JavaScript?",
        "options": [
            "Объект, представляющий завершение или неудачу асинхронной операции",
            "Функция, которая вызывается после завершения асинхронной операции",
            "Метод для выполнения синхронного кода",
            "Функция для обработки ошибок"
        ],
        "correct": "Объект, представляющий завершение или неудачу асинхронной операции",
        "explanation": "Промис — это объект, представляющий результат асинхронной операции. Он может быть выполнен (resolved) или отклонен (rejected)."
    },
    {
        "question": "Что выведет этот код: console.log([] + []);?",
        "options": ["", "undefined", "null", "0"],
        "correct": "",
        "explanation": "Пустые массивы приводятся к пустым строкам, поэтому результатом сложения будет пустая строка."
    },
    {
        "question": "Какой результат выполнения следующего кода: console.log(typeof NaN);?",
        "options": ["number", "NaN", "undefined", "object"],
        "correct": "number",
        "explanation": "NaN является числовым значением, поэтому typeof NaN возвращает 'number'."
    },
    {
        "question": "Какой метод используется для преобразования JSON в строку?",
        "options": ["JSON.parse()", "JSON.stringify()", "JSON.toString()", "JSON.convert()"],
        "correct": "JSON.stringify()",
        "explanation": "Метод JSON.stringify() используется для преобразования объекта JavaScript в строку JSON."
    },
    {
        "question": "Какой оператор используется для проверки равенства без приведения типов?",
        "options": ["==", "===", "!=", "!=="],
        "correct": "===",
        "explanation": "Оператор === проверяет равенство без приведения типов."
    },
    {
        "question": "Что такое всплытие (hoisting) в JavaScript?",
        "options": [
            "Перемещение объявления функций и переменных в начало их области видимости",
            "Механизм асинхронного выполнения кода",
            "Процесс преобразования типов",
            "Метод создания замыканий"
        ],
        "correct": "Перемещение объявления функций и переменных в начало их области видимости",
        "explanation": "Всплытие (hoisting) — это механизм JavaScript, при котором объявления переменных и функций поднимаются в начало их области видимости до выполнения кода."
    },
    {
        "question": "Какой метод используется для добавления элементов в конец массива?",
        "options": ["push()", "pop()", "shift()", "unshift()"],
        "correct": "push()",
        "explanation": "Метод push() добавляет один или более элементов в конец массива и возвращает новую длину массива."
    },
    {
        "question": "Какое значение возвращает метод Array.prototype.find() если элемент не найден?",
        "options": ["null", "undefined", "false", "0"],
        "correct": "undefined",
        "explanation": "Метод find() возвращает значение первого найденного элемента в массиве, который удовлетворяет условию, или undefined, если такой элемент не найден."
    },
    {
        "question": "Что такое строгий режим ('use strict') в JavaScript?",
        "options": [
            "Режим, который позволяет использовать только ES6 синтаксис",
            "Режим, который делает код более строгим и безопасным",
            "Режим, который отключает все предупреждения",
            "Режим, который позволяет использовать только синхронные функции"
        ],
        "correct": "Режим, который делает код более строгим и безопасным",
        "explanation": "Строгий режим ('use strict') накладывает ограничения на использование некоторых функций языка и улучшает диагностику ошибок."
    },
    {
        "question": "Какой оператор используется для создания копии объекта?",
        "options": ["=", "Object.assign()", "copy()", "clone()"],
        "correct": "Object.assign()",
        "explanation": "Метод Object.assign() копирует все перечисляемые свойства из одного или более исходных объектов в целевой объект."
    },
    {
        "question": "Что такое объект в JavaScript?",
        "options": [
            "Совокупность значений и методов",
            "Коллекция неупорядоченных пар ключ-значение",
            "Функция, вызываемая с ключевым словом new",
            "Переменная, содержащая ссылки на другие переменные"
        ],
        "correct": "Коллекция неупорядоченных пар ключ-значение",
        "explanation": "Объект в JavaScript — это коллекция неупорядоченных пар ключ-значение, где ключи являются строками или символами, а значения могут быть любого типа."
    },
    {
        "question": "Что делает метод Array.prototype.reduce()?",
        "options": [
            "Объединяет все элементы массива в одну строку",
            "Возвращает новый массив с результатами применения функции к каждому элементу",
            "Применяет функцию к аккумулятору и каждому элементу массива (слева направо), чтобы свести его к одному значению",
            "Удаляет элементы из массива"
        ],
        "correct": "Применяет функцию к аккумулятору и каждому элементу массива (слева направо), чтобы свести его к одному значению",
        "explanation": "Метод reduce() применяет функцию к аккумулятору и каждому элементу массива (слева направо), чтобы свести его к одному значению."
    },
    {
        "question": "Что выведет этот код: console.log(2 + '2');?",
        "options": ["4", "'22'", "NaN", "undefined"],
        "correct": "'22'",
        "explanation": "При сложении числа и строки число приводится к строке, и выполняется конкатенация, результатом будет '22'."
    },
    {
        "question": "Как объявить асинхронную функцию в JavaScript?",
        "options": ["async function myFunc() {}", "function* myFunc() {}", "function async myFunc() {}", "myFunc() async {}"],
        "correct": "async function myFunc() {}",
        "explanation": "Для объявления асинхронной функции используется ключевое слово async перед function."
    },
    {
        "question": "Что такое IIFE (Immediately Invoked Function Expression)?",
        "options": [
            "Функция, которая вызывается немедленно после её определения",
            "Функция, которая вызывается после выполнения асинхронного кода",
            "Функция, которая вызывается только один раз",
            "Функция, которая вызывается только внутри другого выражения"
        ],
        "correct": "Функция, которая вызывается немедленно после её определения",
        "explanation": "IIFE (Immediately Invoked Function Expression) — это функция, которая вызывается сразу после её создания."
    },
    {
        "question": "Какое значение имеет this в глобальной области видимости (в браузере)?",
        "options": ["undefined", "null", "global", "window"],
        "correct": "window",
        "explanation": "В глобальной области видимости (в браузере) this ссылается на объект window."
    },
    {
        "question": "Какое значение вернет следующее выражение: [] == false?",
        "options": ["true", "false"],
        "correct": "true",
        "explanation": "При приведении массива к булевому значению он становится true, но при сравнении с false он приводится к пустой строке, которая равна false."
    },
    {
        "question": "Как остановить выполнение цикла for?",
        "options": ["continue", "return", "stop", "break"],
        "correct": "break",
        "explanation": "Оператор break используется для выхода из цикла for, while, do-while или switch."
    },
    {
        "question": "Что выведет этот код: console.log('5' - 3);?",
        "options": ["2", "'23'", "NaN", "undefined"],
        "correct": "2",
        "explanation": "Операция вычитания приводит строку '5' к числу, поэтому результатом будет 2."
    },
    {
        "question": "Что такое стрелочная функция (arrow function) в JavaScript?",
        "options": [
            "Функция, которая не может быть анонимной",
            "Функция, у которой нет собственного this",
            "Функция, которая не может быть вызвана с помощью ключевого слова new",
            "Функция, которая всегда выполняется асинхронно"
        ],
        "correct": "Функция, у которой нет собственного this",
        "explanation": "Стрелочные функции не имеют собственного this и всегда используют значение this из окружения, в котором они были определены."
    },
    {
        "question": "Какой метод используется для преобразования строки в целое число?",
        "options": ["parseInt()", "parseFloat()", "toString()", "Number()"],
        "correct": "parseInt()",
        "explanation": "Метод parseInt() принимает строку в качестве аргумента и возвращает целое число."
    },
    {
        "question": "Что выведет этот код: console.log(typeof []);?",
        "options": ["array", "object", "undefined", "null"],
        "correct": "object",
        "explanation": "Массивы в JavaScript являются объектами, поэтому typeof [] возвращает 'object'."
    },
    {
        "question": "Какой метод используется для проверки, является ли значение массивом?",
        "options": ["Array.isArray()", "isArray()", "isArrayValue()", "checkArray()"],
        "correct": "Array.isArray()",
        "explanation": "Метод Array.isArray() возвращает true, если значение является массивом, и false, если нет."
    },
    {
        "question": "Что делает метод Array.prototype.filter()?",
        "options": [
            "Возвращает новый массив с элементами, которые прошли проверку, реализованную в предоставленной функции",
            "Изменяет исходный массив, удаляя элементы, которые не прошли проверку",
            "Применяет функцию к каждому элементу массива и возвращает новый массив с результатами",
            "Объединяет два массива в один"
        ],
        "correct": "Возвращает новый массив с элементами, которые прошли проверку, реализованную в предоставленной функции",
        "explanation": "Метод filter() создает новый массив с элементами, которые прошли проверку, реализованную в предоставленной функции."
    },
    {
        "question": "Что такое Promise в JavaScript?",
        "options": [
            "Объект, представляющий завершение или неудачу асинхронной операции",
            "Функция, которая вызывается после завершения асинхронной операции",
            "Объект, представляющий синхронное выполнение кода",
            "Метод для обработки ошибок"
        ],
        "correct": "Объект, представляющий завершение или неудачу асинхронной операции",
        "explanation": "Promise — это объект, представляющий результат асинхронной операции. Он может быть выполнен (resolved) или отклонен (rejected)."
    },
    {
        "question": "Что делает метод Array.prototype.some()?",
        "options": [
            "Проверяет, удовлетворяет ли хотя бы один элемент массива условию, заданному в предоставленной функции",
            "Проверяет, удовлетворяют ли все элементы массива условию, заданному в предоставленной функции",
            "Создает новый массив с элементами, которые прошли проверку",
            "Удаляет элементы из массива"
        ],
        "correct": "Проверяет, удовлетворяет ли хотя бы один элемент массива условию, заданному в предоставленной функции",
        "explanation": "Метод some() проверяет, удовлетворяет ли хотя бы один элемент массива условию, заданному в предоставленной функции, и возвращает true или false."
    },
    {
        "question": "Какой результат выполнения следующего кода: console.log(null == undefined);?",
        "options": ["true", "false"],
        "correct": "true",
        "explanation": "null и undefined равны при нестрогом сравнении (==), но не равны при строгом сравнении (===)."
    },

    {
        "question": "Что выведет этот код: console.log(typeof function() {});?",
        "options": ["function", "object", "undefined", "string"],
        "correct": "function",
        "explanation": "Функции в JavaScript имеют тип 'function'."
    },
    {
        "question": "Что выведет этот код: console.log(1 == '1');?",
        "options": ["true", "false"],
        "correct": "true",
        "explanation": "Оператор == приводит оба операнда к одному типу перед сравнением, поэтому '1' приводится к числу 1."
    },
    {
        "question": "Что выведет этот код: console.log(1 === '1');?",
        "options": ["true", "false"],
        "correct": "false",
        "explanation": "Оператор === проверяет равенство без приведения типов, поэтому число 1 и строка '1' не равны."
    },
    {
        "question": "Какой метод используется для объединения двух массивов?",
        "options": ["concat()", "join()", "push()", "splice()"],
        "correct": "concat()",
        "explanation": "Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван, и других массивов и/или значений, переданных в качестве аргументов."
    },
    {
        "question": "Что делает метод Array.prototype.slice()?",
        "options": [
            "Изменяет массив на месте, удаляя элементы",
            "Создает новый массив, содержащий копию части исходного массива",
            "Добавляет элементы в конец массива",
            "Применяет функцию к каждому элементу массива"
        ],
        "correct": "Создает новый массив, содержащий копию части исходного массива",
        "explanation": "Метод slice() возвращает новый массив, содержащий копию части исходного массива, не изменяя его."
    },
    {
        "question": "Что делает метод Array.prototype.splice()?",
        "options": [
            "Изменяет массив на месте, добавляя или удаляя элементы",
            "Создает новый массив, содержащий копию части исходного массива",
            "Возвращает новый массив с элементами, которые прошли проверку",
            "Объединяет два массива в один"
        ],
        "correct": "Изменяет массив на месте, добавляя или удаляя элементы",
        "explanation": "Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые."
    },
    {
        "question": "Какой результат выполнения следующего кода: console.log([1, 2, 3].map(x => x * 2));?",
        "options": ["[2, 4, 6]", "[1, 2, 3]", "[1, 4, 9]", "undefined"],
        "correct": "[2, 4, 6]",
        "explanation": "Метод map() применяет функцию ко всем элементам массива и возвращает новый массив с результатами."
    },
    {
        "question": "Что такое 'стрелочная функция' (arrow function) в JavaScript?",
        "options": [
            "Функция, которая не имеет собственного this",
            "Функция, которая всегда является анонимной",
            "Функция, которая может быть вызвана с ключевым словом new",
            "Функция, которая всегда выполняется асинхронно"
        ],
        "correct": "Функция, которая не имеет собственного this",
        "explanation": "Стрелочные функции не имеют собственного this и всегда используют значение this из окружения, в котором они были определены."
    },
    {
        "question": "Что делает метод Object.keys()?",
        "options": [
            "Возвращает массив всех ключей объекта",
            "Возвращает массив всех значений объекта",
            "Возвращает массив всех ключей и значений объекта",
            "Удаляет все ключи из объекта"
        ],
        "correct": "Возвращает массив всех ключей объекта",
        "explanation": "Метод Object.keys() возвращает массив, содержащий имена всех собственных перечисляемых свойств объекта."
    },
    {
        "question": "Что делает метод Object.values()?",
        "options": [
            "Возвращает массив всех значений объекта",
            "Возвращает массив всех ключей объекта",
            "Возвращает массив всех ключей и значений объекта",
            "Удаляет все значения из объекта"
        ],
        "correct": "Возвращает массив всех значений объекта",
        "explanation": "Метод Object.values() возвращает массив, содержащий значения всех собственных перечисляемых свойств объекта."
    },
    {
        "question": "Что делает метод Object.entries()?",
        "options": [
            "Возвращает массив всех пар [ключ, значение] объекта",
            "Возвращает массив всех значений объекта",
            "Возвращает массив всех ключей объекта",
            "Удаляет все ключи и значения из объекта"
        ],
        "correct": "Возвращает массив всех пар [ключ, значение] объекта",
        "explanation": "Метод Object.entries() возвращает массив, содержащий все пары [ключ, значение] собственных перечисляемых свойств объекта."
    },
    {
        "question": "Какой результат выполнения следующего кода: console.log(Math.max(1, 2, 3));?",
        "options": ["1", "2", "3", "undefined"],
        "correct": "3",
        "explanation": "Метод Math.max() возвращает наибольшее из переданных чисел."
    },
    {
        "question": "Что делает метод String.prototype.split()?",
        "options": [
            "Разделяет строку на массив подстрок по указанному разделителю",
            "Соединяет все элементы массива в строку",
            "Преобразует строку в число",
            "Возвращает часть строки"
        ],
        "correct": "Разделяет строку на массив подстрок по указанному разделителю",
        "explanation": "Метод split() разбивает строку на массив подстрок, используя указанный разделитель."
    },
    {
        "question": "Что делает метод String.prototype.slice()?",
        "options": [
            "Возвращает часть строки",
            "Разделяет строку на массив подстрок",
            "Преобразует строку в число",
            "Соединяет все элементы массива в строку"
        ],
        "correct": "Возвращает часть строки",
        "explanation": "Метод slice() извлекает часть строки и возвращает новую строку без изменения оригинальной."
    },
    {
        "question": "Какое значение вернет следующее выражение: 'use strict'; x = 10;",
        "options": ["10", "undefined", "ReferenceError", "TypeError"],
        "correct": "ReferenceError",
        "explanation": "В строгом режиме ('use strict') использование необъявленных переменных вызывает ошибку ReferenceError."
    },
    {
        "question": "Что делает метод Array.prototype.join()?",
        "options": [
            "Соединяет все элементы массива в строку",
            "Возвращает новый массив с элементами, которые прошли проверку",
            "Изменяет массив на месте, добавляя или удаляя элементы",
            "Применяет функцию к каждому элементу массива"
        ],
        "correct": "Соединяет все элементы массива в строку",
        "explanation": "Метод join() объединяет все элементы массива в строку, используя указанный разделитель."
    },
    {
        "question": "Что делает метод Array.prototype.forEach()?",
        "options": [
            "Применяет функцию к каждому элементу массива",
            "Возвращает новый массив с результатами применения функции к каждому элементу",
            "Изменяет массив на месте, добавляя или удаляя элементы",
            "Возвращает новый массив с элементами, которые прошли проверку"
        ],
        "correct": "Применяет функцию к каждому элементу массива",
        "explanation": "Метод forEach() выполняет указанную функцию один раз для каждого элемента массива."
    },
    {
        "question": "Какой результат выполнения следующего кода: console.log([1, 2, 3].find(x => x > 1));?",
        "options": ["1", "2", "3", "undefined"],
        "correct": "2",
        "explanation": "Метод find() возвращает первый элемент массива, который удовлетворяет условию, заданному в предоставленной функции."
    },
    {
        "question": "Что делает метод Array.prototype.reduceRight()?",
        "options": [
            "Применяет функцию к аккумулятору и каждому элементу массива (справа налево), чтобы свести его к одному значению",
            "Применяет функцию к каждому элементу массива (слева направо)",
            "Объединяет все элементы массива в одну строку",
            "Удаляет элементы из массива"
        ],
        "correct": "Применяет функцию к аккумулятору и каждому элементу массива (справа налево), чтобы свести его к одному значению",
        "explanation": "Метод reduceRight() применяет функцию к аккумулятору и каждому элементу массива (справа налево), чтобы свести его к одному значению."
    },
    {
        "question": "Что делает метод Array.prototype.flat()?",
        "options": [
            "Создает новый массив, содержащий все элементы исходного массива, но в плоском виде (убирает вложенность)",
            "Применяет функцию к каждому элементу массива и возвращает новый массив с результатами",
            "Объединяет два массива в один",
            "Удаляет все элементы массива"
        ],
        "correct": "Создает новый массив, содержащий все элементы исходного массива, но в плоском виде (убирает вложенность)",
        "explanation": "Метод flat() создает новый массив, убирая вложенность всех элементов в указанный уровень."
    }
]
